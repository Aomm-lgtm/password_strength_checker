import json

from cryptography.fernet import Fernet 
import typer
import rich 


partition = "-"*100

strength_style = {
    "STRONG": "[bold green]STRONG[/bold green]",
    "FAIR": "[bold yellow]FAIR[/bold yellow]",
    "WEAK": "[bold red]WEAK[/bold red]",
}

app = typer.Typer()


@app.command("save")
def save():
    login = typer.prompt("Please enter a login to be associated to your password")
    password = typer.prompt("Please enter your password")
    encpassword = _encrypt(password)
    dict = {login, encpassword}
    json.dumps(dict)

    # strength = _check_strength(password)
    # if strength != "STRONG":
        # if not typer.confirm("Your password is vulnerable. Are you sure you wish to use it?"):


@app.command("delete")
def delete(login):
    pass

@app.command("delete_all")
def delete_all():
    pass

def main(password: str = typer.Argument("1234", help="Password to assess" ),
         check_strength: str = typer.Option(),
         save = typer.Option(),
         get_password: str = typer.Option(),
         ):
    pass














def _check_strength(password: str) -> str:
    """
    checks your passwords strength and assigns a level to it (WEAK, FAIR, STRONG)

    Args:
        password: the password you want to be assessed

    Returns:
        strength: your password strength, can either be WEAK, FAIR or STRONG.
    """

    if password.isdigit() or len(password) < 8:
        return "WEAK"
    elif 8<= len(password) <= 12:
        if _get_digit_percentage(password) > 0.5:
            return "WEAK"
        else:
            return "FAIR"
    elif _get_digit_percentage(password) <= 0.4 and _is_special_character(password):
        return "STRONG"
    else:
        return "FAIR"

def _get_digit_percentage(password: str) -> float:
    """
    counts the number of digits in your password and returns 

    Args:
        password: the password you want to be assessed

    Returns:
        digit_percentage: the ratio of digits over the total number of characters in your password
    """
    digit = 0
    for character in password:
        if character.isdigit():
            digit += 1
  
    digit_percentage = digit/len(password)
    return digit_percentage


def _is_special_character(password: str) -> bool :
    """
    checks if the password contains at leats one special character

    Args:
        password: the password you want to be assessed

    Returns:
        bool: if there is at least one special character, True will be returned, if not then False will be returned
    """
    special_characters = "!@#$%^&*()-+?_=,<>;:/"
    for character in password:
        if character in special_characters:
            return True
    return False

def _encrypt(password):
    """
    Use Frenet class to generate a key and encrypt your password

    Args:
        password: Your password

    Returns:
        encpassword: Your encrypted password
        passkey: The key generated using Frenet class
    """
    key = Fernet.generate_key()
    passkey = Fernet(key)
    encpassword = passkey.encrypt(password.encode())

    return encpassword, passkey


def _decrypt(encpassword, passkey):
    """
    Decrypts the password

    Args:
        encpassword: Your password encrypted by _encrypt the function 
        passkey: The Frenet passkey generated by the _encrypt function 

    Returns:
        decpassword: The original password 
    """
    decpassword = passkey.decrypt(encpassword).decode()

    return decpassword


if __name__ == "__main__":
    app()