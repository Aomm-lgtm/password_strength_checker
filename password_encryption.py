import typer
from cryptography.fernet import Fernet

partition = "-"*100

def main(password: str = typer.Argument("1234", help="password to encrypt")):
    """
    Encrypts your password

    Args:
        password: Your password. Defaults to typer.Argument("1234", help="password to encrypt").
    """
    print(partition)

    encpassword, passkey = _encrypt(password)
    typer.echo(f"Your encrypted password is {encpassword}")

    decrypt = typer.confirm("Would you like to decode your password ?")
    if decrypt :
        _decrypt(encpassword, passkey)
        decpassword = passkey.decrypt(encpassword).decode()
        typer.echo(f"Your original password was: {decpassword}")

    print(partition)
  

def _encrypt(password):
    """
    Use Frenet class to generate a key and encrypt your password

    Args:
        password: Your password

    Returns:
        encpassword: Your encrypted password
        passkey: The key generated using Frenet class
    """
    key = Fernet.generate_key()
    passkey = Fernet(key)
    encpassword = passkey.encrypt(password.encode())

    return encpassword, passkey


def _decrypt(encpassword, passkey):
    """
    Decrypts the password

    Args:
        encpassword: Your password encrypted by _encrypt the function 
        passkey: The Frenet passkey generated by the _encrypt function 

    Returns:
        decpassword: The original password 
    """
    decpassword = passkey.decrypt(encpassword).decode()

    return decpassword

if __name__ == "__main__":
    typer.run(main)